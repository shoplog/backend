import { Static, Type } from '@sinclair/typebox';
import { FixedInteger } from 'src/api/schemas/common.schema';

const ProblemSchema = Type.Object(
	{
		type: Type.String({
			minLength: 1,
			description: 'A URI reference that identifies the problem type',
			default: 'about:blank',
		}),
		title: Type.String({
			minLength: 1,
			description: 'A short, human-readable summary of the problem type',
		}),
		status: FixedInteger({
			description: 'The HTTP status code generated by the origin server for this occurrence of the problem',
			minimum: 400,
			maximum: 599,
		}),
		detail: Type.Optional(
			Type.String({
				minLength: 1,
				description: 'A human-readable explanation specific to this occurrence of the problem',
			})
		),
		instance: Type.Optional(
			Type.String({
				minLength: 1,
				description: 'A URI reference that identifies the specific occurrence of the problem',
			})
		),
	},
	{
		description: 'A Problem Details object (RFC 9457)',
	}
);

const ValidationErrorSchema = Type.Object(
	{
		name: Type.String({ minLength: 1 }),
		reason: Type.String({ minLength: 1 }),
	},
	{
		description: 'A validation error',
	}
);

const ValidationProblemSchema = Type.Intersect([
	ProblemSchema,
	Type.Object(
		{ errors: Type.Array(ValidationErrorSchema, { description: 'A list of validation errors' }) },
		{
			description: 'A Problem Details object (RFC 9457) which includes validation errors',
			examples: [
				{
					type: 'about:blank',
					title: 'Validation Error',
					status: 400,
					detail: 'One or more validation errors occurred',
					instance: 'https://example.com/api/v1/resource/123',
					errors: [
						{
							name: 'name',
							reason: 'Name is required',
						},
						{
							name: 'email',
							reason: 'Email is invalid',
						},
					],
				},
			],
		}
	),
]);

type Problem = Static<typeof ProblemSchema>;
type ValidationError = Static<typeof ValidationErrorSchema>;
type ValidationProblem = Static<typeof ValidationProblemSchema>;

export {
	// Types
	Problem,
	ValidationError,
	ValidationProblem,

	// Schemas
	ProblemSchema,
	ValidationErrorSchema,
	ValidationProblemSchema,
};
