import { Static, Type } from '@sinclair/typebox';
import { FixedInteger } from 'src/api/openapi/schemas/common.schema';

const ProblemSchema = Type.Object(
	{
		type: Type.String({
			minLength: 1,
			description: 'A URI reference that identifies the problem type',
			default: 'about:blank',
		}),
		code: Type.String({
			minLength: 1,
			description: 'Error code type specific to the application',
			default: 'unknown_error',
		}),
		title: Type.String({
			minLength: 1,
			description: 'A short, human-readable summary of the problem type',
		}),
		status: FixedInteger({
			description: 'The HTTP status code generated by the origin server for this occurrence of the problem',
			minimum: 400,
			maximum: 599,
		}),
		detail: Type.Optional(
			Type.String({
				minLength: 1,
				description: 'A human-readable explanation specific to this occurrence of the problem',
			})
		),
		instance: Type.Optional(
			Type.String({
				minLength: 1,
				description: 'A URI reference that identifies the specific occurrence of the problem',
			})
		),
	},
	{
		description: 'A Problem Details object (RFC 9457)',
		additionalProperties: Type.Record(Type.String(), Type.Any()),
	}
);

const ValidationErrorSchema = Type.Object(
	{
		path: Type.String(),
		message: Type.String(),
		errorCode: Type.Optional(Type.String()),
	},
	{
		description: 'A validation error',
	}
);

const ValidationProblemSchema = Type.Composite(
	[
		ProblemSchema,
		Type.Object({ errors: Type.Array(ValidationErrorSchema, { description: 'A list of validation errors' }) }),
	],
	{
		description: 'A Problem Details object (RFC 9457) which includes validation errors',
		additionalProperties: Type.Record(Type.String(), Type.Any()),
		examples: [
			{
				type: 'about:blank',
				code: 'validation_error',
				title: 'Validation Error',
				status: 400,
				detail: 'One or more validation errors occurred',
				instance: 'https://example.com/api/v1/resource/123',
				errors: [
					{
						path: '/boop',
						message: 'Boop is required',
					},
					{
						path: '/boop',
						message: 'Boop is required',
						errorCode: 'required',
					},
				],
			},
		],
	}
);

type Problem = {
	[key: string]: Record<string, unknown> | string | number | null | undefined;
} & Static<typeof ProblemSchema>;
type ValidationError = Static<typeof ValidationErrorSchema>;
type ValidationProblem = Static<typeof ValidationProblemSchema> & Problem;

export {
	// Types
	Problem,
	ValidationError,
	ValidationProblem,

	// Schemas
	ProblemSchema,
	ValidationErrorSchema,
	ValidationProblemSchema,
};
